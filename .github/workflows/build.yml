name: Deploy

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - synchronize

concurrency:
  group: "deploy"
  cancel-in-progress: true

env:
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-deploy-commit:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check-commit.outputs.should-deploy }}
    steps:
      - name: Check if commit message contains @deploy
        id: check-commit
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if echo "$COMMIT_MSG" | grep -q "@deploy"; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  build:
    runs-on: ubuntu-latest
    needs: check-deploy-commit
    if: ${{ needs.check-deploy-commit.outputs.should-deploy == 'true'}}
    outputs:
      version: ${{ steps.version.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Version
        id: version
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            return process.env.GITHUB_SHA.substring(0, 7);

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ vars.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
  
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ vars.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.result }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    if: ${{ github.event_name != 'pull_request' && needs.check-deploy-commit.outputs.should-deploy == 'true' }}
    needs:
      - check-deploy-commit
      - build
    runs-on: ubuntu-latest
    steps:
    - name: Deploy with Docker Compose
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: root
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          echo ${{ secrets.REGISTRY_PASSWORD }} | docker login ${{ vars.REGISTRY }} -u ${{ secrets.REGISTRY_USER }} --password-stdin

          mkdir -p /data/blog
          cd /data/blog

          # Create docker-compose.yml for blog
          cat > docker-compose.yml <<EOF
          version: '3.8'
          
          services:
            blog:
              image: ${{ vars.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }}
              container_name: blog
              ports:
                - "127.0.0.1:3004:3000"
              restart: unless-stopped
          EOF

          # Pull the latest image and restart the service
          docker compose pull blog
          docker compose up -d --remove-orphans blog
          docker image prune -f

    - name: Send Apprise notification
      if: ${{ vars.APPRISE_URL != '' }}
      run: |
        APPRISE_TAG=${APPRISE_TAG:-all}
        curl -X POST \
          -F "body=Your blog has been updated." \
          -F "tags=$APPRISE_TAG" \
          -u "${{ secrets.APPRISE_BASIC_AUTH}}" \
          ${{ vars.APPRISE_URL }}
      env:
        APPRISE_TAG: ${{ vars.APPRISE_TAG }}